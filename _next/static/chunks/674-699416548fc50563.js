"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[674],{2099:(e,t,r)=>{r.d(t,{ND:()=>i});var o=r(5647);let a="https://habcejrrbnybmidzsola.supabase.co",n="eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImhhYmNlanJyYm55Ym1pZHpzb2xhIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTI5MDg3ODEsImV4cCI6MjA2ODQ4NDc4MX0.30hNR1Bv0Gpp3Nw81k3uyFgNoGPXF_LLHEbPxgQa8QY";if(!a||!n)throw Error("Missing Supabase environment variables");let i=(0,o.UU)(a,n,{auth:{autoRefreshToken:!0,persistSession:!0,detectSessionInUrl:!0},realtime:{params:{eventsPerSecond:10}},global:{headers:{"x-application-name":"scienceforaction"}}})},5674:(e,t,r)=>{r.d(t,{L:()=>n});var o=r(2099);class a{initializePerformanceTracking(){setInterval(()=>{this.recordSystemMetric("performance_check",Date.now())},3e4)}async createUser(e){let t=Date.now();try{let r={name:e.name||"Anonymous User",email:e.email,location:e.location,interests:e.interests||[],preferred_causes:e.preferred_causes||[],contribution_stats:e.contribution_stats||{actions_completed:0,organizations_supported:0,policies_viewed:0,total_impact_score:0},personalization:e.personalization||{layout_preference:"detailed",color_scheme:"neutral",engagement_level:"medium",communication_frequency:"weekly"},profile_completion:this.calculateProfileCompletion(e),engagement_metrics:{session_count:0,avg_session_duration:0,page_views:0,actions_per_session:0},last_active:new Date().toISOString()},{data:a,error:n}=await o.ND.from("user_profiles").insert([r]).select().single();if(n)throw n;return await this.recordSystemMetric("user_created",1,{creation_time:Date.now()-t,profile_completion:r.profile_completion}),a}catch(e){return console.error("Error creating user:",e),await this.recordSystemMetric("user_creation_error",1,{error:e instanceof Error?e.message:String(e)}),null}}async getUserById(e){try{let{data:t,error:r}=await o.ND.from("user_profiles").select("*").eq("id",e).single();if(r)throw r;if(!t)return null;return await this.enhanceUserWithAI(t)}catch(e){return console.error("Error fetching user:",e),null}}async updateUser(e,t){try{let r={...t,profile_completion:t.name||t.email||t.location?this.calculateProfileCompletion(t):void 0,updated_at:new Date().toISOString(),last_active:new Date().toISOString()},{data:a,error:n}=await o.ND.from("user_profiles").update(r).eq("id",e).select().single();if(n)throw n;return await this.recordSystemMetric("user_updated",1),a}catch(r){return console.error("Error updating user:",{error:r,userId:e,updateKeys:Object.keys(t),message:r instanceof Error?r.message:"Unknown error"}),null}}async getUsersByLocation(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:50;try{let{data:r,error:a}=await o.ND.from("user_profiles").select("*").ilike("location","%".concat(e,"%")).order("last_active",{ascending:!1}).limit(t);if(a)throw a;return r||[]}catch(e){return console.error("Error fetching users by location:",e),[]}}async getUsersByInterest(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:50;try{let{data:r,error:a}=await o.ND.from("user_profiles").select("*").contains("interests",[e]).order("last_active",{ascending:!1}).limit(t);if(a)throw a;return r||[]}catch(e){return console.error("Error fetching users by interest:",e),[]}}async searchUsers(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:50;try{let{data:r,error:a}=await o.ND.from("user_profiles").select("*").or("name.ilike.%".concat(e,"%,email.ilike.%").concat(e,"%,location.ilike.%").concat(e,"%")).order("last_active",{ascending:!1}).limit(t);if(a)throw a;return r||[]}catch(e){return console.error("Error searching users:",e),[]}}async getEngagementLeaderboard(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:10;try{let{data:t,error:r}=await o.ND.from("user_engagement_summary").select("*").order("actions_completed",{ascending:!1}).order("completion_rate",{ascending:!1}).limit(e);if(r)throw r;return t||[]}catch(e){return console.error("Error fetching leaderboard:",e),[]}}async getRecentlyActive(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:30,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:100,r=new Date;r.setDate(r.getDate()-e);try{let{data:e,error:a}=await o.ND.from("user_profiles").select("*").gte("last_active",r.toISOString()).order("last_active",{ascending:!1}).limit(t);if(a)throw a;return e||[]}catch(e){return console.error("Error fetching recently active users:",e),[]}}async getActions(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:50,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;try{let{data:r,error:a}=await o.ND.from("action_items").select("*").eq("is_active",!0).order("completion_count",{ascending:!1}).range(t,t+e-1);if(a)throw a;return r||[]}catch(e){return console.error("Error fetching actions:",e),[]}}async getPopularActions(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:20;try{let{data:t,error:r}=await o.ND.from("popular_actions").select("*").limit(e);if(r)throw r;return t||[]}catch(e){return console.error("Error fetching popular actions:",e),[]}}async getPersonalizedActions(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:10;try{let r=await this.getUserById(e);if(!r)return[];let{interests:a,preferred_causes:n}=r,i=[...a,...n],{data:s,error:c}=await o.ND.from("action_items").select("*").overlaps("tags",i).eq("is_active",!0).order("completion_count",{ascending:!1}).limit(t);if(c)throw c;return s||[]}catch(e){return console.error("Error fetching personalized actions:",e),[]}}async startAction(e,t){try{let{data:r,error:a}=await o.ND.from("user_actions").insert([{user_id:e,action_id:t,status:"started"}]).select().single();if(a)throw a;return await this.recordSystemMetric("action_started",1),r}catch(e){return console.error("Error starting action:",e),null}}async completeAction(e,t,r,a){try{let{data:n,error:i}=await o.ND.from("user_actions").update({status:"completed",completed_at:new Date().toISOString(),impact_reported:r,feedback:a}).eq("user_id",e).eq("action_id",t).select().single();if(i)throw i;return await o.ND.rpc("increment_completion_count",{action_id:t}),await this.recordSystemMetric("action_completed",1,{impact_reported:r,has_feedback:!!a}),n}catch(e){return console.error("Error completing action:",e),null}}async getEngagementStats(){try{let[e,t,r,a,n]=await Promise.all([o.ND.from("user_profiles").select("id",{count:"exact",head:!0}),o.ND.from("user_profiles").select("id",{count:"exact",head:!0}).gte("last_active",new Date(Date.now()-6048e5).toISOString()),o.ND.from("user_profiles").select("id",{count:"exact",head:!0}).gte("created_at",new Date(Date.now()-6048e5).toISOString()),o.ND.from("user_actions").select("status",{count:"exact"}),o.ND.from("popular_actions").select("*").limit(10)]),i=a.count||0,s=await o.ND.from("user_actions").select("id",{count:"exact",head:!0}).eq("status","completed");return{total_users:e.count||0,active_users:t.count||0,new_users_this_week:r.count||0,completion_rate:i>0?(s.count||0)/i*100:0,avg_session_duration:0,top_performing_actions:n.data||[],user_distribution_by_location:await this.getUserLocationDistribution(),engagement_trends:await this.getEngagementTrends()}}catch(e){return console.error("Error fetching engagement stats:",e),{total_users:0,active_users:0,new_users_this_week:0,completion_rate:0,avg_session_duration:0,top_performing_actions:[],user_distribution_by_location:{},engagement_trends:[]}}}async getRealTimeMetrics(){try{let[e,t,r]=await Promise.all([o.ND.from("user_sessions").select("id",{count:"exact",head:!0}).is("session_end",null),o.ND.from("user_actions").select("id",{count:"exact",head:!0}).eq("status","in_progress"),o.ND.from("user_actions").select("id",{count:"exact",head:!0}).eq("status","completed").gte("completed_at",new Date(Date.now()-36e5).toISOString())]);return{active_sessions:e.count||0,actions_in_progress:t.count||0,recent_completions:r.count||0,system_health:"healthy",response_time:this.performanceMetrics.get("avg_response_time")||0}}catch(e){return console.error("Error fetching real-time metrics:",e),{active_sessions:0,actions_in_progress:0,recent_completions:0,system_health:"critical",response_time:0}}}async generateSyntheticUsers(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:1e3;console.log("Starting generation of ".concat(e," synthetic users in Supabase..."));let t=Date.now(),r=0;try{for(let t=0;t<e;t+=50){let a=Math.min(50,e-t),n=this.generateUserBatch(a);try{let{error:i}=await o.ND.from("user_profiles").insert(n);if(i){console.error("Error inserting batch ".concat(Math.floor(t/50)+1,":"),{error:i.message,batchStart:t,batchSize:a}),await new Promise(e=>setTimeout(e,1e3));continue}r+=a,(t+50)%500==0&&console.log("Generated ".concat(r,"/").concat(e," users...")),await new Promise(e=>setTimeout(e,100))}catch(e){console.error("Failed to process batch ".concat(Math.floor(t/50)+1,":"),e),await new Promise(e=>setTimeout(e,2e3))}}await this.generateSyntheticActions(500);let a=(Date.now()-t)/1e3;await this.recordSystemMetric("synthetic_data_generated",e,{duration_seconds:a,batch_size:50}),console.log("Successfully generated ".concat(e," users and 500 actions in ").concat(a.toFixed(2)," seconds"))}catch(e){throw console.error("Error generating synthetic users:",e),e}}generateUserBatch(e){let t=[],r=["New York, NY","Los Angeles, CA","Chicago, IL","Houston, TX","Phoenix, AZ","Philadelphia, PA","San Antonio, TX","San Diego, CA","Dallas, TX","San Jose, CA","London, UK","Berlin, Germany","Paris, France","Tokyo, Japan","Sydney, Australia"],o=["Climate Change","Social Justice","Education","Healthcare","Technology","Environment","Human Rights","Economic Justice","Democracy","Immigration","LGBTQ+ Rights","Racial Equality","Gender Equality","Mental Health","Housing"],a=["Environmental Protection","Poverty Reduction","Educational Access","Healthcare Access","Civil Rights","Criminal Justice Reform","Immigration Reform","LGBTQ+ Advocacy","Climate Action","Social Services","Economic Opportunity","Democratic Participation"];for(let n=0;n<e;n++){let e=this.getRandomItems(o,Math.floor(5*Math.random())+1),n=this.getRandomItems(a,Math.floor(3*Math.random())+1);t.push({name:this.generateRandomName(),email:Math.random()>.3?this.generateRandomEmail():void 0,location:r[Math.floor(Math.random()*r.length)],interests:e,preferred_causes:n,contribution_stats:{actions_completed:Math.floor(20*Math.random()),organizations_supported:Math.floor(10*Math.random()),policies_viewed:Math.floor(50*Math.random()),total_impact_score:Math.floor(1e3*Math.random())},personalization:{layout_preference:["minimal","detailed","visual"][Math.floor(3*Math.random())],color_scheme:["warm","cool","neutral"][Math.floor(3*Math.random())],engagement_level:["low","medium","high"][Math.floor(3*Math.random())],communication_frequency:["daily","weekly","monthly"][Math.floor(3*Math.random())]},profile_completion:Math.floor(101*Math.random()),engagement_metrics:{session_count:Math.floor(100*Math.random()),avg_session_duration:Math.floor(3600*Math.random()),page_views:Math.floor(500*Math.random()),actions_per_session:5*Math.random()},last_active:new Date(Date.now()-90*Math.random()*864e5).toISOString()})}return t}async generateSyntheticActions(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:500,t=["Environmental","Social Justice","Education","Healthcare","Economic","Technology","Political","Community","International","Cultural"],r=["Greenpeace","ACLU","United Way","Red Cross","Amnesty International","Sierra Club","NAACP","Planned Parenthood","Electronic Frontier Foundation","Human Rights Watch","Doctors Without Borders","Habitat for Humanity"];try{for(let a=0;a<e;a+=50){let n=[];for(let o=0;o<Math.min(50,e-a);o++){let e=t[Math.floor(Math.random()*t.length)];n.push({title:"".concat(e," Action ").concat(a+o+1),description:"Take meaningful action for ".concat(e.toLowerCase()," causes in your community."),category:e,difficulty:["easy","medium","hard"][Math.floor(3*Math.random())],time_commitment:["15 minutes","30 minutes","1 hour","2 hours"][Math.floor(4*Math.random())],impact_level:["low","medium","high"][Math.floor(3*Math.random())],organization:r[Math.floor(Math.random()*r.length)],location:Math.random()>.5?"Remote":"Local",tags:this.getRandomItems(["urgent","beginner-friendly","high-impact","community","policy","volunteer"],Math.floor(3*Math.random())+1),completion_count:Math.floor(1e3*Math.random())})}let{error:i}=await o.ND.from("action_items").insert(n);i&&console.error("Error inserting action batch:",i)}}catch(e){console.error("Error generating synthetic actions:",e)}}subscribeToUserUpdates(e,t){let r=o.ND.channel("user_".concat(e)).on("postgres_changes",{event:"*",schema:"public",table:"user_profiles",filter:"id=eq.".concat(e)},e=>{e.new&&t(e.new)}).subscribe();return this.realtimeSubscriptions.set("user_".concat(e),r),()=>{r.unsubscribe(),this.realtimeSubscriptions.delete("user_".concat(e))}}subscribeToSystemMetrics(e){let t=o.ND.channel("system_metrics").on("postgres_changes",{event:"INSERT",schema:"public",table:"system_metrics"},t=>{t.new&&e(t.new)}).subscribe();return this.realtimeSubscriptions.set("system_metrics",t),()=>{t.unsubscribe(),this.realtimeSubscriptions.delete("system_metrics")}}async recordSystemMetric(e,t){let r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};try{await o.ND.from("system_metrics").insert([{metric_type:e,value:t,metadata:r}])}catch(e){console.error("Error recording system metric:",e)}}calculateProfileCompletion(e){let t=0;return e.name&&(t+=20),e.email&&(t+=20),e.location&&(t+=15),e.interests&&e.interests.length>0&&(t+=25),e.preferred_causes&&e.preferred_causes.length>0&&(t+=20),Math.min(t,100)}async enhanceUserWithAI(e){let t={engagement_prediction:100*Math.random(),recommended_actions:["Climate Action","Community Volunteering"],behavioral_patterns:["Morning Active","Weekend Engaged"],impact_potential:["low","medium","high"][Math.floor(3*Math.random())],next_best_action:"Complete your profile for better recommendations"};return{...e,ai_insights:t}}async getUserLocationDistribution(){try{let{data:e,error:t}=await o.ND.from("user_profiles").select("location");if(t)throw t;let r={};return null==e||e.forEach(e=>{e.location&&(r[e.location]=(r[e.location]||0)+1)}),r}catch(e){return console.error("Error getting location distribution:",e),{}}}async getEngagementTrends(){let e=[],t=new Date;for(let r=6;r>=0;r--){let o=new Date(t);o.setDate(o.getDate()-r),e.push({date:o.toISOString().split("T")[0],active_users:Math.floor(1e3*Math.random()),actions_completed:Math.floor(500*Math.random())})}return e}generateRandomName(){let e=["Alex","Jordan","Taylor","Morgan","Casey","Riley","Avery","Quinn","Sage","River","Phoenix","Rowan","Skylar","Emery","Finley"],t=["Smith","Johnson","Williams","Brown","Jones","Garcia","Miller","Davis","Rodriguez","Martinez","Hernandez","Lopez","Gonzalez"];return"".concat(e[Math.floor(Math.random()*e.length)]," ").concat(t[Math.floor(Math.random()*t.length)])}generateRandomEmail(){let e=["gmail.com","yahoo.com","outlook.com","example.com"],t=this.generateRandomName().toLowerCase().replace(" ",".");return"".concat(t,"@").concat(e[Math.floor(Math.random()*e.length)])}getRandomItems(e,t){return[...e].sort(()=>.5-Math.random()).slice(0,t)}destroy(){this.realtimeSubscriptions.forEach(e=>{e.unsubscribe()}),this.realtimeSubscriptions.clear()}constructor(){this.realtimeSubscriptions=new Map,this.performanceMetrics=new Map,this.initializePerformanceTracking()}}let n=new a}}]);